classdef Missel
    properties
        % 导弹参数
        S_ref % 特征面积(m^2)
        L_ref % 特征长度(m)
        L_wing % 翼展(m)
    end

    methods
        function obj = Missel(S_ref, L_ref, L_wing)
            % 导弹参数
            obj.S_ref = S_ref;
            obj.L_ref = L_ref;
            obj.L_wing = L_wing;
        end

        function dstates_dt = Missel_Dynamics(obj, states, t)
            % 导弹6自由度动力学方程组
            V = states.V;
            theta = states.theta;
            phi_V = states.phi_V;
            omega_x = states.omega_x;
            omega_y = states.omega_y;
            omega_z = states.omega_z;
            nu = states.nu;
            gama = states.gama;
            m = states.m;

            g = 9.8;

            [J_x, J_y, J_z] = obj.Missel_Inertia(obj, t);

            [alpha, beta, gama_V] = obj.Missel_Angle(obj, states);

            [X, Y, Z, M_x, M_y, M_z] = obj.Missel_Aerodynamics(obj, states);

            [P, m_c] = obj.Missel_Propotion(obj);
            
            dV_dt = ( ...
                        P * cos(alpha) * cos(beta) ...
                        - X ...
                        - m * g * sin(theta) ...
                    ) / m;
            dtheta_dt = ( ...
                            P * ( ...
                                sin(alpha) * cos(gama_V) ...
                                + cos(alpha) * sin(beta) * sin(gama_V) ...
                                ) ...
                            + Y * cos(gama_V) ...
                            - Z * sin(gama_V) ...
                            - m * g * cos(theta) ...
                        ) / m / V;
            dphi_V_dt = ( ...
                            P * ( ...
                                sin(alpha) * sin(gama_V) ...
                                - cos(alpha) * sin(beta) * cos(gama_V) ...
                                ) ...
                            + Y * sin(gama_V) ...
                            + Z * cos(gama_V) ...
                        ) / m / V / cos(theta);
            domega_x_dt = ( ...
                            M_x ...
                            - (J_z - J_y) * omega_z * omega_y ...
                            ) / Jx;
            domega_y_dt = ( ...
                            M_y ...
                            - (J_x - J_z) * omega_x * omega_z ...
                            ) / J_y;
            domega_z_dt = ( ...
                            M_z ...
                            - (J_y - J_x) * omega_y * omega_x ...
                            ) / J_z;
            
            dx_dt = V * cos(theta) * cos(phi_V);
            
            dy_dt = V * sin(theta);
            
            dz_dt = - V * cos(theta) * sin(phi_V);

            dnu_dt = omega_y * sin(gama) + omega_z * cos(gama);

            dphi_dt = (...
                        omega_y * cos(gama) ...
                        - omega_z * sin(gama) ...
                        ) / cos(nu);
            
            dgama_dt = omega_x ...
                        - ( ...
                            omega_y * cos(gama) ...
                            - omega_z * sin(gama) ...
                            ) * tan(nu);
            
            dm_dt = - m_c;

            dstates_dt = [dV_dt;
                          dtheta_dt;
                          dphi_V_dt;
                          domega_x_dt;
                          domega_y_dt;
                          domega_z_dt;
                          dx_dt;
                          dy_dt;
                          dz_dt;
                          dphi_dt;
                          dnu_dt;
                          dgama_dt;
                          dm_dt];

            % fprintf(['时间%.4f\n'...
            % '速度%.2f 马赫数%.2f 动压%.2f\n'...
            % '射程%.2f 高度%.2f 弹道倾角%.2f(deg) 俯仰角%.2f(deg)\n'...
            % '俯仰力矩%.2f 转动角速度%.2f\n'...
            % '质量%.2f 质心位置%.2f 质量流量%.2f\n'...
            % '攻角%.2f(deg) 升力系数%.2f 升力%.2f 阻力系数Cx%.2f 阻力%.2f 推力%.2f\n\n'], ...
            % t, ...
            % Vm, ma, q, ...
            % xm, ym, rad2deg(theta), rad2deg(nu), ...
            % Mz, wz, ...
            % m, xg, m_c, ...
            % rad2deg(alpha), Cy, Y, Cx, X, P);
        end

        function [alpha, beta, gama_V] = Missel_Angle(~, states)
            theta = states.theta;
            phi_V = states.phi_V;
            nu = states.nu;
            phi = states.phi;
            gama = states.gama;

            beta = asin( ...
                        cos(theta) * ( ...
                            cos(gama) * sin(phi - phi_V) ...
                            + sin(nu) * sin(gama) * cos(phi - phi_V) ...
                            ) ...
                        - sin(theta) * sin(nu) * sin(gama) ...
                        );
            alpha = asin( ...
                        ( ...
                            cos(theta) * ( ...
                                sin(nu) * cos(gama) * cos(phi - phi_V) ...
                                - sin(gama) * sin(phi - phi_V) ...
                                ) ...
                            - sin(theta) * cos(nu) * cos(game) ...
                        ) / cos(beta) ...
                        );
            gama_V = asin(...
                            ( ...
                                cos(alpha) * sin(beta) * sin(nu) ...
                                - sin(alpha) * sin(beta) * cos(nu) ...
                                + cos(beta) * sin(gama) * cos(nu) ...
                            ) / cos(theta) ...
                        );
        end

        function [P, m_c] = Missel_Propotion(~, t)
            P = ATM_thrust(t);
            m_c = ATM_mc(t);
        end
        
        function [J_x, J_y, J_z] = Missel_Inertia(~, t)
            J_x = 10; % 忽略滚转
            J_y = ATM_Jy(t); 
            J_z = J_y; % 轴对称导弹
        end

        function [X, Y, Z, M_x, M_y, M_z] = Missel_Aerodynamics(obj, states)
            V = states.V;
            y = states.y;
            
            [alpha, beta, ~] = obj.Missel_Angle(obj, states);

            xg = ATM_xg(t);
            ma = V / Sound_Speed(y)
            rho = Air_Density(ym);
            q = 1/2 * rho * V ^ 2;

            Cx = ATM_Cx(ma, alpha + beta);
            Cy = ATM_Cy(ma, alpha);
            Cz = - ATM_Cy(ma, beta);
            Y = q * obj.S_ref * Cy;
            X = q * obj.S_ref * Cx;
            Z = q * obj.S_ref * Cz;

            mza = ATM_mza(ma, alpha, xg, obj.L_ref);
            mzdz = ATM_mzdz(ma, delta_z);
            mzwz = ATM_mzwz(ma, alpha, xg); % 归一化omega * L /V
            myb = ATM_mza(ma, beta, xg, obj.L_ref);
            mydy = ATM_mzdz(ma, delta_y);
            mywy = ATM_mzwz(ma, beta, xg);
            M_x = 0;
            M_z = (mza + mzdz + mzwz * wz * obj.L_wing / V) * q * obj.S_ref * obj.L_wing;
            M_y = (myb + mydy + mywy * wy * obj.L_wing / V) * q * obj.S_ref * obj.L_wing;
        end
    end
end

